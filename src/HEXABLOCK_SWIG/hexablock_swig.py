# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hexablock_swig', [dirname(__file__)])
        except ImportError:
            import _hexablock_swig
            return _hexablock_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_hexablock_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hexablock_swig = swig_import_helper()
    del swig_import_helper
else:
    import _hexablock_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hexablock_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _hexablock_swig.SwigPyIterator_value(self)
    def incr(self, n = 1): return _hexablock_swig.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _hexablock_swig.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _hexablock_swig.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _hexablock_swig.SwigPyIterator_equal(self, *args)
    def copy(self): return _hexablock_swig.SwigPyIterator_copy(self)
    def next(self): return _hexablock_swig.SwigPyIterator_next(self)
    def __next__(self): return _hexablock_swig.SwigPyIterator___next__(self)
    def previous(self): return _hexablock_swig.SwigPyIterator_previous(self)
    def advance(self, *args): return _hexablock_swig.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _hexablock_swig.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _hexablock_swig.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _hexablock_swig.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _hexablock_swig.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _hexablock_swig.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _hexablock_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _hexablock_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorHexas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorHexas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorHexas, name)
    __repr__ = _swig_repr
    def iterator(self): return _hexablock_swig.VectorHexas_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _hexablock_swig.VectorHexas___nonzero__(self)
    def __bool__(self): return _hexablock_swig.VectorHexas___bool__(self)
    def __len__(self): return _hexablock_swig.VectorHexas___len__(self)
    def pop(self): return _hexablock_swig.VectorHexas_pop(self)
    def __getslice__(self, *args): return _hexablock_swig.VectorHexas___getslice__(self, *args)
    def __setslice__(self, *args): return _hexablock_swig.VectorHexas___setslice__(self, *args)
    def __delslice__(self, *args): return _hexablock_swig.VectorHexas___delslice__(self, *args)
    def __delitem__(self, *args): return _hexablock_swig.VectorHexas___delitem__(self, *args)
    def __getitem__(self, *args): return _hexablock_swig.VectorHexas___getitem__(self, *args)
    def __setitem__(self, *args): return _hexablock_swig.VectorHexas___setitem__(self, *args)
    def append(self, *args): return _hexablock_swig.VectorHexas_append(self, *args)
    def empty(self): return _hexablock_swig.VectorHexas_empty(self)
    def size(self): return _hexablock_swig.VectorHexas_size(self)
    def clear(self): return _hexablock_swig.VectorHexas_clear(self)
    def swap(self, *args): return _hexablock_swig.VectorHexas_swap(self, *args)
    def get_allocator(self): return _hexablock_swig.VectorHexas_get_allocator(self)
    def begin(self): return _hexablock_swig.VectorHexas_begin(self)
    def end(self): return _hexablock_swig.VectorHexas_end(self)
    def rbegin(self): return _hexablock_swig.VectorHexas_rbegin(self)
    def rend(self): return _hexablock_swig.VectorHexas_rend(self)
    def pop_back(self): return _hexablock_swig.VectorHexas_pop_back(self)
    def erase(self, *args): return _hexablock_swig.VectorHexas_erase(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorHexas(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _hexablock_swig.VectorHexas_push_back(self, *args)
    def front(self): return _hexablock_swig.VectorHexas_front(self)
    def back(self): return _hexablock_swig.VectorHexas_back(self)
    def assign(self, *args): return _hexablock_swig.VectorHexas_assign(self, *args)
    def resize(self, *args): return _hexablock_swig.VectorHexas_resize(self, *args)
    def insert(self, *args): return _hexablock_swig.VectorHexas_insert(self, *args)
    def reserve(self, *args): return _hexablock_swig.VectorHexas_reserve(self, *args)
    def capacity(self): return _hexablock_swig.VectorHexas_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorHexas
    __del__ = lambda self : None;
VectorHexas_swigregister = _hexablock_swig.VectorHexas_swigregister
VectorHexas_swigregister(VectorHexas)

class VectorQuads(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorQuads, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorQuads, name)
    __repr__ = _swig_repr
    def iterator(self): return _hexablock_swig.VectorQuads_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _hexablock_swig.VectorQuads___nonzero__(self)
    def __bool__(self): return _hexablock_swig.VectorQuads___bool__(self)
    def __len__(self): return _hexablock_swig.VectorQuads___len__(self)
    def pop(self): return _hexablock_swig.VectorQuads_pop(self)
    def __getslice__(self, *args): return _hexablock_swig.VectorQuads___getslice__(self, *args)
    def __setslice__(self, *args): return _hexablock_swig.VectorQuads___setslice__(self, *args)
    def __delslice__(self, *args): return _hexablock_swig.VectorQuads___delslice__(self, *args)
    def __delitem__(self, *args): return _hexablock_swig.VectorQuads___delitem__(self, *args)
    def __getitem__(self, *args): return _hexablock_swig.VectorQuads___getitem__(self, *args)
    def __setitem__(self, *args): return _hexablock_swig.VectorQuads___setitem__(self, *args)
    def append(self, *args): return _hexablock_swig.VectorQuads_append(self, *args)
    def empty(self): return _hexablock_swig.VectorQuads_empty(self)
    def size(self): return _hexablock_swig.VectorQuads_size(self)
    def clear(self): return _hexablock_swig.VectorQuads_clear(self)
    def swap(self, *args): return _hexablock_swig.VectorQuads_swap(self, *args)
    def get_allocator(self): return _hexablock_swig.VectorQuads_get_allocator(self)
    def begin(self): return _hexablock_swig.VectorQuads_begin(self)
    def end(self): return _hexablock_swig.VectorQuads_end(self)
    def rbegin(self): return _hexablock_swig.VectorQuads_rbegin(self)
    def rend(self): return _hexablock_swig.VectorQuads_rend(self)
    def pop_back(self): return _hexablock_swig.VectorQuads_pop_back(self)
    def erase(self, *args): return _hexablock_swig.VectorQuads_erase(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorQuads(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _hexablock_swig.VectorQuads_push_back(self, *args)
    def front(self): return _hexablock_swig.VectorQuads_front(self)
    def back(self): return _hexablock_swig.VectorQuads_back(self)
    def assign(self, *args): return _hexablock_swig.VectorQuads_assign(self, *args)
    def resize(self, *args): return _hexablock_swig.VectorQuads_resize(self, *args)
    def insert(self, *args): return _hexablock_swig.VectorQuads_insert(self, *args)
    def reserve(self, *args): return _hexablock_swig.VectorQuads_reserve(self, *args)
    def capacity(self): return _hexablock_swig.VectorQuads_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorQuads
    __del__ = lambda self : None;
VectorQuads_swigregister = _hexablock_swig.VectorQuads_swigregister
VectorQuads_swigregister(VectorQuads)

class VectorEdges(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorEdges, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorEdges, name)
    __repr__ = _swig_repr
    def iterator(self): return _hexablock_swig.VectorEdges_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _hexablock_swig.VectorEdges___nonzero__(self)
    def __bool__(self): return _hexablock_swig.VectorEdges___bool__(self)
    def __len__(self): return _hexablock_swig.VectorEdges___len__(self)
    def pop(self): return _hexablock_swig.VectorEdges_pop(self)
    def __getslice__(self, *args): return _hexablock_swig.VectorEdges___getslice__(self, *args)
    def __setslice__(self, *args): return _hexablock_swig.VectorEdges___setslice__(self, *args)
    def __delslice__(self, *args): return _hexablock_swig.VectorEdges___delslice__(self, *args)
    def __delitem__(self, *args): return _hexablock_swig.VectorEdges___delitem__(self, *args)
    def __getitem__(self, *args): return _hexablock_swig.VectorEdges___getitem__(self, *args)
    def __setitem__(self, *args): return _hexablock_swig.VectorEdges___setitem__(self, *args)
    def append(self, *args): return _hexablock_swig.VectorEdges_append(self, *args)
    def empty(self): return _hexablock_swig.VectorEdges_empty(self)
    def size(self): return _hexablock_swig.VectorEdges_size(self)
    def clear(self): return _hexablock_swig.VectorEdges_clear(self)
    def swap(self, *args): return _hexablock_swig.VectorEdges_swap(self, *args)
    def get_allocator(self): return _hexablock_swig.VectorEdges_get_allocator(self)
    def begin(self): return _hexablock_swig.VectorEdges_begin(self)
    def end(self): return _hexablock_swig.VectorEdges_end(self)
    def rbegin(self): return _hexablock_swig.VectorEdges_rbegin(self)
    def rend(self): return _hexablock_swig.VectorEdges_rend(self)
    def pop_back(self): return _hexablock_swig.VectorEdges_pop_back(self)
    def erase(self, *args): return _hexablock_swig.VectorEdges_erase(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorEdges(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _hexablock_swig.VectorEdges_push_back(self, *args)
    def front(self): return _hexablock_swig.VectorEdges_front(self)
    def back(self): return _hexablock_swig.VectorEdges_back(self)
    def assign(self, *args): return _hexablock_swig.VectorEdges_assign(self, *args)
    def resize(self, *args): return _hexablock_swig.VectorEdges_resize(self, *args)
    def insert(self, *args): return _hexablock_swig.VectorEdges_insert(self, *args)
    def reserve(self, *args): return _hexablock_swig.VectorEdges_reserve(self, *args)
    def capacity(self): return _hexablock_swig.VectorEdges_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorEdges
    __del__ = lambda self : None;
VectorEdges_swigregister = _hexablock_swig.VectorEdges_swigregister
VectorEdges_swigregister(VectorEdges)

class VectorVertices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVertices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVertices, name)
    __repr__ = _swig_repr
    def iterator(self): return _hexablock_swig.VectorVertices_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _hexablock_swig.VectorVertices___nonzero__(self)
    def __bool__(self): return _hexablock_swig.VectorVertices___bool__(self)
    def __len__(self): return _hexablock_swig.VectorVertices___len__(self)
    def pop(self): return _hexablock_swig.VectorVertices_pop(self)
    def __getslice__(self, *args): return _hexablock_swig.VectorVertices___getslice__(self, *args)
    def __setslice__(self, *args): return _hexablock_swig.VectorVertices___setslice__(self, *args)
    def __delslice__(self, *args): return _hexablock_swig.VectorVertices___delslice__(self, *args)
    def __delitem__(self, *args): return _hexablock_swig.VectorVertices___delitem__(self, *args)
    def __getitem__(self, *args): return _hexablock_swig.VectorVertices___getitem__(self, *args)
    def __setitem__(self, *args): return _hexablock_swig.VectorVertices___setitem__(self, *args)
    def append(self, *args): return _hexablock_swig.VectorVertices_append(self, *args)
    def empty(self): return _hexablock_swig.VectorVertices_empty(self)
    def size(self): return _hexablock_swig.VectorVertices_size(self)
    def clear(self): return _hexablock_swig.VectorVertices_clear(self)
    def swap(self, *args): return _hexablock_swig.VectorVertices_swap(self, *args)
    def get_allocator(self): return _hexablock_swig.VectorVertices_get_allocator(self)
    def begin(self): return _hexablock_swig.VectorVertices_begin(self)
    def end(self): return _hexablock_swig.VectorVertices_end(self)
    def rbegin(self): return _hexablock_swig.VectorVertices_rbegin(self)
    def rend(self): return _hexablock_swig.VectorVertices_rend(self)
    def pop_back(self): return _hexablock_swig.VectorVertices_pop_back(self)
    def erase(self, *args): return _hexablock_swig.VectorVertices_erase(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorVertices(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _hexablock_swig.VectorVertices_push_back(self, *args)
    def front(self): return _hexablock_swig.VectorVertices_front(self)
    def back(self): return _hexablock_swig.VectorVertices_back(self)
    def assign(self, *args): return _hexablock_swig.VectorVertices_assign(self, *args)
    def resize(self, *args): return _hexablock_swig.VectorVertices_resize(self, *args)
    def insert(self, *args): return _hexablock_swig.VectorVertices_insert(self, *args)
    def reserve(self, *args): return _hexablock_swig.VectorVertices_reserve(self, *args)
    def capacity(self): return _hexablock_swig.VectorVertices_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorVertices
    __del__ = lambda self : None;
VectorVertices_swigregister = _hexablock_swig.VectorVertices_swigregister
VectorVertices_swigregister(VectorVertices)

class VectorShapes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorShapes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorShapes, name)
    __repr__ = _swig_repr
    def iterator(self): return _hexablock_swig.VectorShapes_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _hexablock_swig.VectorShapes___nonzero__(self)
    def __bool__(self): return _hexablock_swig.VectorShapes___bool__(self)
    def __len__(self): return _hexablock_swig.VectorShapes___len__(self)
    def pop(self): return _hexablock_swig.VectorShapes_pop(self)
    def __getslice__(self, *args): return _hexablock_swig.VectorShapes___getslice__(self, *args)
    def __setslice__(self, *args): return _hexablock_swig.VectorShapes___setslice__(self, *args)
    def __delslice__(self, *args): return _hexablock_swig.VectorShapes___delslice__(self, *args)
    def __delitem__(self, *args): return _hexablock_swig.VectorShapes___delitem__(self, *args)
    def __getitem__(self, *args): return _hexablock_swig.VectorShapes___getitem__(self, *args)
    def __setitem__(self, *args): return _hexablock_swig.VectorShapes___setitem__(self, *args)
    def append(self, *args): return _hexablock_swig.VectorShapes_append(self, *args)
    def empty(self): return _hexablock_swig.VectorShapes_empty(self)
    def size(self): return _hexablock_swig.VectorShapes_size(self)
    def clear(self): return _hexablock_swig.VectorShapes_clear(self)
    def swap(self, *args): return _hexablock_swig.VectorShapes_swap(self, *args)
    def get_allocator(self): return _hexablock_swig.VectorShapes_get_allocator(self)
    def begin(self): return _hexablock_swig.VectorShapes_begin(self)
    def end(self): return _hexablock_swig.VectorShapes_end(self)
    def rbegin(self): return _hexablock_swig.VectorShapes_rbegin(self)
    def rend(self): return _hexablock_swig.VectorShapes_rend(self)
    def pop_back(self): return _hexablock_swig.VectorShapes_pop_back(self)
    def erase(self, *args): return _hexablock_swig.VectorShapes_erase(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorShapes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _hexablock_swig.VectorShapes_push_back(self, *args)
    def front(self): return _hexablock_swig.VectorShapes_front(self)
    def back(self): return _hexablock_swig.VectorShapes_back(self)
    def assign(self, *args): return _hexablock_swig.VectorShapes_assign(self, *args)
    def resize(self, *args): return _hexablock_swig.VectorShapes_resize(self, *args)
    def insert(self, *args): return _hexablock_swig.VectorShapes_insert(self, *args)
    def reserve(self, *args): return _hexablock_swig.VectorShapes_reserve(self, *args)
    def capacity(self): return _hexablock_swig.VectorShapes_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorShapes
    __del__ = lambda self : None;
VectorShapes_swigregister = _hexablock_swig.VectorShapes_swigregister
VectorShapes_swigregister(VectorShapes)

class VectorReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorReal, name)
    __repr__ = _swig_repr
    def iterator(self): return _hexablock_swig.VectorReal_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _hexablock_swig.VectorReal___nonzero__(self)
    def __bool__(self): return _hexablock_swig.VectorReal___bool__(self)
    def __len__(self): return _hexablock_swig.VectorReal___len__(self)
    def pop(self): return _hexablock_swig.VectorReal_pop(self)
    def __getslice__(self, *args): return _hexablock_swig.VectorReal___getslice__(self, *args)
    def __setslice__(self, *args): return _hexablock_swig.VectorReal___setslice__(self, *args)
    def __delslice__(self, *args): return _hexablock_swig.VectorReal___delslice__(self, *args)
    def __delitem__(self, *args): return _hexablock_swig.VectorReal___delitem__(self, *args)
    def __getitem__(self, *args): return _hexablock_swig.VectorReal___getitem__(self, *args)
    def __setitem__(self, *args): return _hexablock_swig.VectorReal___setitem__(self, *args)
    def append(self, *args): return _hexablock_swig.VectorReal_append(self, *args)
    def empty(self): return _hexablock_swig.VectorReal_empty(self)
    def size(self): return _hexablock_swig.VectorReal_size(self)
    def clear(self): return _hexablock_swig.VectorReal_clear(self)
    def swap(self, *args): return _hexablock_swig.VectorReal_swap(self, *args)
    def get_allocator(self): return _hexablock_swig.VectorReal_get_allocator(self)
    def begin(self): return _hexablock_swig.VectorReal_begin(self)
    def end(self): return _hexablock_swig.VectorReal_end(self)
    def rbegin(self): return _hexablock_swig.VectorReal_rbegin(self)
    def rend(self): return _hexablock_swig.VectorReal_rend(self)
    def pop_back(self): return _hexablock_swig.VectorReal_pop_back(self)
    def erase(self, *args): return _hexablock_swig.VectorReal_erase(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _hexablock_swig.VectorReal_push_back(self, *args)
    def front(self): return _hexablock_swig.VectorReal_front(self)
    def back(self): return _hexablock_swig.VectorReal_back(self)
    def assign(self, *args): return _hexablock_swig.VectorReal_assign(self, *args)
    def resize(self, *args): return _hexablock_swig.VectorReal_resize(self, *args)
    def insert(self, *args): return _hexablock_swig.VectorReal_insert(self, *args)
    def reserve(self, *args): return _hexablock_swig.VectorReal_reserve(self, *args)
    def capacity(self): return _hexablock_swig.VectorReal_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorReal
    __del__ = lambda self : None;
VectorReal_swigregister = _hexablock_swig.VectorReal_swigregister
VectorReal_swigregister(VectorReal)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _hexablock_swig.VectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _hexablock_swig.VectorInt___nonzero__(self)
    def __bool__(self): return _hexablock_swig.VectorInt___bool__(self)
    def __len__(self): return _hexablock_swig.VectorInt___len__(self)
    def pop(self): return _hexablock_swig.VectorInt_pop(self)
    def __getslice__(self, *args): return _hexablock_swig.VectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _hexablock_swig.VectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _hexablock_swig.VectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _hexablock_swig.VectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _hexablock_swig.VectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _hexablock_swig.VectorInt___setitem__(self, *args)
    def append(self, *args): return _hexablock_swig.VectorInt_append(self, *args)
    def empty(self): return _hexablock_swig.VectorInt_empty(self)
    def size(self): return _hexablock_swig.VectorInt_size(self)
    def clear(self): return _hexablock_swig.VectorInt_clear(self)
    def swap(self, *args): return _hexablock_swig.VectorInt_swap(self, *args)
    def get_allocator(self): return _hexablock_swig.VectorInt_get_allocator(self)
    def begin(self): return _hexablock_swig.VectorInt_begin(self)
    def end(self): return _hexablock_swig.VectorInt_end(self)
    def rbegin(self): return _hexablock_swig.VectorInt_rbegin(self)
    def rend(self): return _hexablock_swig.VectorInt_rend(self)
    def pop_back(self): return _hexablock_swig.VectorInt_pop_back(self)
    def erase(self, *args): return _hexablock_swig.VectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _hexablock_swig.VectorInt_push_back(self, *args)
    def front(self): return _hexablock_swig.VectorInt_front(self)
    def back(self): return _hexablock_swig.VectorInt_back(self)
    def assign(self, *args): return _hexablock_swig.VectorInt_assign(self, *args)
    def resize(self, *args): return _hexablock_swig.VectorInt_resize(self, *args)
    def insert(self, *args): return _hexablock_swig.VectorInt_insert(self, *args)
    def reserve(self, *args): return _hexablock_swig.VectorInt_reserve(self, *args)
    def capacity(self): return _hexablock_swig.VectorInt_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _hexablock_swig.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

HOK = _hexablock_swig.HOK
HERR = _hexablock_swig.HERR
NOTHING = _hexablock_swig.NOTHING
EOL = _hexablock_swig.EOL
EOS = _hexablock_swig.EOS
CHVIDE = _hexablock_swig.CHVIDE
ZEROR = _hexablock_swig.ZEROR
UNR = _hexablock_swig.UNR
DEMI = _hexablock_swig.DEMI
DIM2 = _hexablock_swig.DIM2
M_PI = _hexablock_swig.M_PI
Degre2Radian = _hexablock_swig.Degre2Radian
dir_x = _hexablock_swig.dir_x
dir_y = _hexablock_swig.dir_y
dir_z = _hexablock_swig.dir_z
DIM3 = _hexablock_swig.DIM3
EL_NONE = _hexablock_swig.EL_NONE
EL_VERTEX = _hexablock_swig.EL_VERTEX
EL_EDGE = _hexablock_swig.EL_EDGE
EL_QUAD = _hexablock_swig.EL_QUAD
EL_HEXA = _hexablock_swig.EL_HEXA
EL_VECTOR = _hexablock_swig.EL_VECTOR
EL_GRID = _hexablock_swig.EL_GRID
EL_CYLINDER = _hexablock_swig.EL_CYLINDER
EL_PIPE = _hexablock_swig.EL_PIPE
EL_GROUP = _hexablock_swig.EL_GROUP
EL_LAW = _hexablock_swig.EL_LAW
EL_SHAPE = _hexablock_swig.EL_SHAPE
EL_SUBSHAPE = _hexablock_swig.EL_SUBSHAPE
EL_PROPAGATION = _hexablock_swig.EL_PROPAGATION
EL_DOCU = _hexablock_swig.EL_DOCU
EL_REMOVED = _hexablock_swig.EL_REMOVED
EL_MAXI = _hexablock_swig.EL_MAXI
HexaCell = _hexablock_swig.HexaCell
QuadCell = _hexablock_swig.QuadCell
EdgeCell = _hexablock_swig.EdgeCell
HexaNode = _hexablock_swig.HexaNode
QuadNode = _hexablock_swig.QuadNode
EdgeNode = _hexablock_swig.EdgeNode
VertexNode = _hexablock_swig.VertexNode
SH_NONE = _hexablock_swig.SH_NONE
SH_IMPORT = _hexablock_swig.SH_IMPORT
SH_CYLINDER = _hexablock_swig.SH_CYLINDER
SH_INTER = _hexablock_swig.SH_INTER
SH_SPHERE = _hexablock_swig.SH_SPHERE
SH_CLOUD = _hexablock_swig.SH_CLOUD
SH_EXTRUD = _hexablock_swig.SH_EXTRUD
CYL_NOFILL = _hexablock_swig.CYL_NOFILL
CYL_CL4 = _hexablock_swig.CYL_CL4
CYL_CL6 = _hexablock_swig.CYL_CL6
CYL_CLOSED = _hexablock_swig.CYL_CLOSED
CYL_PEER = _hexablock_swig.CYL_PEER
CYL_ODD = _hexablock_swig.CYL_ODD
GR_NONE = _hexablock_swig.GR_NONE
GR_CARTESIAN = _hexablock_swig.GR_CARTESIAN
GR_CYLINDRIC = _hexablock_swig.GR_CYLINDRIC
GR_SPHERIC = _hexablock_swig.GR_SPHERIC
GR_JOINT = _hexablock_swig.GR_JOINT
GR_BICYL = _hexablock_swig.GR_BICYL
GR_BIPIPE = _hexablock_swig.GR_BIPIPE
GR_REPLACE = _hexablock_swig.GR_REPLACE
GR_HEMISPHERIC = _hexablock_swig.GR_HEMISPHERIC
GR_RIND = _hexablock_swig.GR_RIND
GR_PART_SPHERIC = _hexablock_swig.GR_PART_SPHERIC
GR_PART_RIND = _hexablock_swig.GR_PART_RIND
S_E = _hexablock_swig.S_E
S_NE = _hexablock_swig.S_NE
S_N = _hexablock_swig.S_N
S_NW = _hexablock_swig.S_NW
S_W = _hexablock_swig.S_W
S_SW = _hexablock_swig.S_SW
S_S = _hexablock_swig.S_S
S_SE = _hexablock_swig.S_SE
S_MAXI = _hexablock_swig.S_MAXI
Uniform = _hexablock_swig.Uniform
Arithmetic = _hexablock_swig.Arithmetic
Geometric = _hexablock_swig.Geometric
OR_FRONT = _hexablock_swig.OR_FRONT
OR_LEFT = _hexablock_swig.OR_LEFT
OR_RIGHT = _hexablock_swig.OR_RIGHT
OR_BACK = _hexablock_swig.OR_BACK
IS_NONE = _hexablock_swig.IS_NONE
IS_MARRIED = _hexablock_swig.IS_MARRIED
NO_COUNTED = _hexablock_swig.NO_COUNTED
NO_USED = _hexablock_swig.NO_USED
IS_USED = _hexablock_swig.IS_USED
V_AMONT = _hexablock_swig.V_AMONT
V_AVAL = _hexablock_swig.V_AVAL
V_TWO = _hexablock_swig.V_TWO
E_A = _hexablock_swig.E_A
E_B = _hexablock_swig.E_B
E_C = _hexablock_swig.E_C
E_D = _hexablock_swig.E_D
QUAD4 = _hexablock_swig.QUAD4
Q_A = _hexablock_swig.Q_A
Q_B = _hexablock_swig.Q_B
Q_C = _hexablock_swig.Q_C
Q_D = _hexablock_swig.Q_D
Q_E = _hexablock_swig.Q_E
Q_F = _hexablock_swig.Q_F
HQ_MAXI = _hexablock_swig.HQ_MAXI
E_AC = _hexablock_swig.E_AC
E_AD = _hexablock_swig.E_AD
E_BC = _hexablock_swig.E_BC
E_BD = _hexablock_swig.E_BD
E_AE = _hexablock_swig.E_AE
E_AF = _hexablock_swig.E_AF
E_BE = _hexablock_swig.E_BE
E_BF = _hexablock_swig.E_BF
E_CE = _hexablock_swig.E_CE
E_CF = _hexablock_swig.E_CF
E_DE = _hexablock_swig.E_DE
E_DF = _hexablock_swig.E_DF
HE_MAXI = _hexablock_swig.HE_MAXI
V_ACE = _hexablock_swig.V_ACE
V_ACF = _hexablock_swig.V_ACF
V_ADE = _hexablock_swig.V_ADE
V_ADF = _hexablock_swig.V_ADF
V_BCE = _hexablock_swig.V_BCE
V_BCF = _hexablock_swig.V_BCF
V_BDE = _hexablock_swig.V_BDE
V_BDF = _hexablock_swig.V_BDF
HV_MAXI = _hexablock_swig.HV_MAXI
Q_INSIDE = _hexablock_swig.Q_INSIDE
Q_DIRECT = _hexablock_swig.Q_DIRECT
Q_INVERSE = _hexablock_swig.Q_INVERSE
Q_UNDEFINED = _hexablock_swig.Q_UNDEFINED
Q_WAITING = _hexablock_swig.Q_WAITING
KS_Line = _hexablock_swig.KS_Line
KS_Circle = _hexablock_swig.KS_Circle
KS_Ellipse = _hexablock_swig.KS_Ellipse
KS_Hyperbola = _hexablock_swig.KS_Hyperbola
KS_Parabola = _hexablock_swig.KS_Parabola
KS_BezierCurve = _hexablock_swig.KS_BezierCurve
KS_BSplineCurve = _hexablock_swig.KS_BSplineCurve
KS_OtherCurve = _hexablock_swig.KS_OtherCurve
KS_None = _hexablock_swig.KS_None
CylSmall = _hexablock_swig.CylSmall
CylBig = _hexablock_swig.CylBig
NxInt = _hexablock_swig.NxInt
NxExt = _hexablock_swig.NxExt

def get_temp_name(*args):
  return _hexablock_swig.get_temp_name(*args)
get_temp_name = _hexablock_swig.get_temp_name

def prod_scalaire(*args):
  return _hexablock_swig.prod_scalaire(*args)
prod_scalaire = _hexablock_swig.prod_scalaire

def prod_vectoriel(*args):
  return _hexablock_swig.prod_vectoriel(*args)
prod_vectoriel = _hexablock_swig.prod_vectoriel

def prod_mixte(*args):
  return _hexablock_swig.prod_mixte(*args)
prod_mixte = _hexablock_swig.prod_mixte

def deg2radians(*args):
  return _hexablock_swig.deg2radians(*args)
deg2radians = _hexablock_swig.deg2radians

def rad2degres(*args):
  return _hexablock_swig.rad2degres(*args)
rad2degres = _hexablock_swig.rad2degres

def calc_norme(*args):
  return _hexablock_swig.calc_norme(*args)
calc_norme = _hexablock_swig.calc_norme

def calc_distance(*args):
  return _hexablock_swig.calc_distance(*args)
calc_distance = _hexablock_swig.calc_distance

def calc_d2(*args):
  return _hexablock_swig.calc_d2(*args)
calc_d2 = _hexablock_swig.calc_d2

def calc_vecteur(*args):
  return _hexablock_swig.calc_vecteur(*args)
calc_vecteur = _hexablock_swig.calc_vecteur

def copy_vecteur(*args):
  return _hexablock_swig.copy_vecteur(*args)
copy_vecteur = _hexablock_swig.copy_vecteur

def calc_milieu(*args):
  return _hexablock_swig.calc_milieu(*args)
calc_milieu = _hexablock_swig.calc_milieu

def normer_vecteur(*args):
  return _hexablock_swig.normer_vecteur(*args)
normer_vecteur = _hexablock_swig.normer_vecteur

def carre(*args):
  return _hexablock_swig.carre(*args)
carre = _hexablock_swig.carre

def on_debug():
  return _hexablock_swig.on_debug()
on_debug = _hexablock_swig.on_debug

def in_test():
  return _hexablock_swig.in_test()
in_test = _hexablock_swig.in_test

def niv_debug():
  return _hexablock_swig.niv_debug()
niv_debug = _hexablock_swig.niv_debug

def set_minus(*args):
  return _hexablock_swig.set_minus(*args)
set_minus = _hexablock_swig.set_minus

def special_option():
  return _hexablock_swig.special_option()
special_option = _hexablock_swig.special_option

def set_special_option(*args):
  return _hexablock_swig.set_special_option(*args)
set_special_option = _hexablock_swig.set_special_option

def sizeof_file(*args):
  return _hexablock_swig.sizeof_file(*args)
sizeof_file = _hexablock_swig.sizeof_file

def read_file(*args):
  return _hexablock_swig.read_file(*args)
read_file = _hexablock_swig.read_file

def get_time(*args):
  return _hexablock_swig.get_time(*args)
get_time = _hexablock_swig.get_time

def make_basename(*args):
  return _hexablock_swig.make_basename(*args)
make_basename = _hexablock_swig.make_basename
class EltBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EltBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EltBase, name)
    __repr__ = _swig_repr
    def countHexa(self): return _hexablock_swig.EltBase_countHexa(self)
    def countQuad(self): return _hexablock_swig.EltBase_countQuad(self)
    def countEdge(self): return _hexablock_swig.EltBase_countEdge(self)
    def countVertex(self): return _hexablock_swig.EltBase_countVertex(self)
    def setError(self, kod = 1): return _hexablock_swig.EltBase_setError(self, kod)
    def getError(self): return _hexablock_swig.EltBase_getError(self)
    def isValid(self): return _hexablock_swig.EltBase_isValid(self)
    def isBad(self): return _hexablock_swig.EltBase_isBad(self)
    def duplicate(self): return _hexablock_swig.EltBase_duplicate(self)
    def clearAssociation(self): return _hexablock_swig.EltBase_clearAssociation(self)
    def replaceEdge(self, *args): return _hexablock_swig.EltBase_replaceEdge(self, *args)
    def replaceVertex(self, *args): return _hexablock_swig.EltBase_replaceVertex(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_EltBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_EltBase
    __del__ = lambda self : None;
    def remove(self): return _hexablock_swig.EltBase_remove(self)
    def suppress(self): return _hexablock_swig.EltBase_suppress(self)
    def dump(self): return _hexablock_swig.EltBase_dump(self)
    def saveXml(self, *args): return _hexablock_swig.EltBase_saveXml(self, *args)
    def majReferences(self): return _hexablock_swig.EltBase_majReferences(self)
    def makeVarName(self, *args): return _hexablock_swig.EltBase_makeVarName(self, *args)
    __swig_getmethods__["makeName"] = lambda x: _hexablock_swig.EltBase_makeName
    if _newclass:makeName = staticmethod(_hexablock_swig.EltBase_makeName)
    def next(self): return _hexablock_swig.EltBase_next(self)
    def setNext(self, *args): return _hexablock_swig.EltBase_setNext(self, *args)
    def getId(self): return _hexablock_swig.EltBase_getId(self)
    def setId(self, *args): return _hexablock_swig.EltBase_setId(self, *args)
    def dad(self): return _hexablock_swig.EltBase_dad(self)
    def getType(self): return _hexablock_swig.EltBase_getType(self)
    def isHere(self): return _hexablock_swig.EltBase_isHere(self)
    def isDeleted(self): return _hexablock_swig.EltBase_isDeleted(self)
    def razReferences(self): return _hexablock_swig.EltBase_razReferences(self)
    def addParent(self, *args): return _hexablock_swig.EltBase_addParent(self, *args)
    def getNbrParents(self): return _hexablock_swig.EltBase_getNbrParents(self)
    def hasParents(self): return _hexablock_swig.EltBase_hasParents(self)
    def getFather(self, *args): return _hexablock_swig.EltBase_getFather(self, *args)
    def getMark(self): return _hexablock_swig.EltBase_getMark(self)
    def setMark(self, *args): return _hexablock_swig.EltBase_setMark(self, *args)
    def printName(self, sep = " "): return _hexablock_swig.EltBase_printName(self, sep)
    def dumpRef(self): return _hexablock_swig.EltBase_dumpRef(self)
    def getName(self, *args): return _hexablock_swig.EltBase_getName(self, *args)
    def setName(self, *args): return _hexablock_swig.EltBase_setName(self, *args)
    def debug(self, niv = 0): return _hexablock_swig.EltBase_debug(self, niv)
    def isAssociated(self): return _hexablock_swig.EltBase_isAssociated(self)
    def getNextName(self): return _hexablock_swig.EltBase_getNextName(self)
EltBase_swigregister = _hexablock_swig.EltBase_swigregister
EltBase_swigregister(EltBase)
cvar = _hexablock_swig.cvar
ABR_TYPES = cvar.ABR_TYPES

def fatal_error(*args):
  return _hexablock_swig.fatal_error(*args)
fatal_error = _hexablock_swig.fatal_error

def same_coords(*args):
  return _hexablock_swig.same_coords(*args)
same_coords = _hexablock_swig.same_coords

def requals(*args):
  return _hexablock_swig.requals(*args)
requals = _hexablock_swig.requals
Epsil = cvar.Epsil
UnEpsil = cvar.UnEpsil
Epsil2 = cvar.Epsil2

def EltBase_makeName(*args):
  return _hexablock_swig.EltBase_makeName(*args)
EltBase_makeName = _hexablock_swig.EltBase_makeName

class Vertex(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr
    def getX(self): return _hexablock_swig.Vertex_getX(self)
    def getY(self): return _hexablock_swig.Vertex_getY(self)
    def getZ(self): return _hexablock_swig.Vertex_getZ(self)
    def setX(self, *args): return _hexablock_swig.Vertex_setX(self, *args)
    def setY(self, *args): return _hexablock_swig.Vertex_setY(self, *args)
    def setZ(self, *args): return _hexablock_swig.Vertex_setZ(self, *args)
    def getAssoX(self): return _hexablock_swig.Vertex_getAssoX(self)
    def getAssoY(self): return _hexablock_swig.Vertex_getAssoY(self)
    def getAssoZ(self): return _hexablock_swig.Vertex_getAssoZ(self)
    def setAssociation(self, *args): return _hexablock_swig.Vertex_setAssociation(self, *args)
    def clearAssociation(self): return _hexablock_swig.Vertex_clearAssociation(self)
    def setColor(self, *args): return _hexablock_swig.Vertex_setColor(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Vertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Vertex
    __del__ = lambda self : None;
Vertex_swigregister = _hexablock_swig.Vertex_swigregister
Vertex_swigregister(Vertex)

class Edge(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    def getVertex(self, *args): return _hexablock_swig.Edge_getVertex(self, *args)
    def addAssociation(self, *args): return _hexablock_swig.Edge_addAssociation(self, *args)
    def setAssociation(self, *args): return _hexablock_swig.Edge_setAssociation(self, *args)
    def findAssociation(self, *args): return _hexablock_swig.Edge_findAssociation(self, *args)
    def clearAssociation(self): return _hexablock_swig.Edge_clearAssociation(self)
    def setColor(self, *args): return _hexablock_swig.Edge_setColor(self, *args)
    def getWay(self): return _hexablock_swig.Edge_getWay(self)
    def getLength(self): return _hexablock_swig.Edge_getLength(self)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Edge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Edge
    __del__ = lambda self : None;
Edge_swigregister = _hexablock_swig.Edge_swigregister
Edge_swigregister(Edge)

class Quad(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quad, name)
    __repr__ = _swig_repr
    def getEdge(self, *args): return _hexablock_swig.Quad_getEdge(self, *args)
    def getVertex(self, *args): return _hexablock_swig.Quad_getVertex(self, *args)
    def addAssociation(self, *args): return _hexablock_swig.Quad_addAssociation(self, *args)
    def clearAssociation(self): return _hexablock_swig.Quad_clearAssociation(self)
    def setColor(self, *args): return _hexablock_swig.Quad_setColor(self, *args)
    def nearestVertex(self, *args): return _hexablock_swig.Quad_nearestVertex(self, *args)
    def getCenter(self, *args): return _hexablock_swig.Quad_getCenter(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Quad(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Quad
    __del__ = lambda self : None;
Quad_swigregister = _hexablock_swig.Quad_swigregister
Quad_swigregister(Quad)

class Hexa(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hexa, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hexa, name)
    __repr__ = _swig_repr
    def getQuad(self, *args): return _hexablock_swig.Hexa_getQuad(self, *args)
    def getEdge(self, *args): return _hexablock_swig.Hexa_getEdge(self, *args)
    def getVertex(self, *args): return _hexablock_swig.Hexa_getVertex(self, *args)
    def setColor(self, *args): return _hexablock_swig.Hexa_setColor(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Hexa(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Hexa
    __del__ = lambda self : None;
Hexa_swigregister = _hexablock_swig.Hexa_swigregister
Hexa_swigregister(Hexa)

class Vector(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def getDx(self): return _hexablock_swig.Vector_getDx(self)
    def getDy(self): return _hexablock_swig.Vector_getDy(self)
    def getDz(self): return _hexablock_swig.Vector_getDz(self)
    def getNorm(self): return _hexablock_swig.Vector_getNorm(self)
    def getAngleX(self): return _hexablock_swig.Vector_getAngleX(self)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Vector
    __del__ = lambda self : None;
Vector_swigregister = _hexablock_swig.Vector_swigregister
Vector_swigregister(Vector)

class Document(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hexablock_swig.new_Document(*args)
        try: self.this.append(this)
        except: self.this = this
    def dump(self): return _hexablock_swig.Document_dump(self)
    def setName(self, *args): return _hexablock_swig.Document_setName(self, *args)
    def setLevel(self, *args): return _hexablock_swig.Document_setLevel(self, *args)
    def save(self, *args): return _hexablock_swig.Document_save(self, *args)
    def saveVtk(self, *args): return _hexablock_swig.Document_saveVtk(self, *args)
    def purge(self): return _hexablock_swig.Document_purge(self)
    def setTolerance(self, *args): return _hexablock_swig.Document_setTolerance(self, *args)
    def getTolerance(self): return _hexablock_swig.Document_getTolerance(self)
    def addVertex(self, x = 0.0, y = 0.0, z = 0.0): return _hexablock_swig.Document_addVertex(self, x, y, z)
    def addEdge(self, *args): return _hexablock_swig.Document_addEdge(self, *args)
    def addEdgeVector(self, *args): return _hexablock_swig.Document_addEdgeVector(self, *args)
    def addQuad(self, *args): return _hexablock_swig.Document_addQuad(self, *args)
    def addQuadVertices(self, *args): return _hexablock_swig.Document_addQuadVertices(self, *args)
    def addHexa(self, *args): return _hexablock_swig.Document_addHexa(self, *args)
    def addHexaVertices(self, *args): return _hexablock_swig.Document_addHexaVertices(self, *args)
    def addHexa2Quads(self, *args): return _hexablock_swig.Document_addHexa2Quads(self, *args)
    def addHexa3Quads(self, *args): return _hexablock_swig.Document_addHexa3Quads(self, *args)
    def addHexa4Quads(self, *args): return _hexablock_swig.Document_addHexa4Quads(self, *args)
    def addHexa5Quads(self, *args): return _hexablock_swig.Document_addHexa5Quads(self, *args)
    def addVector(self, dx = 0.0, dy = 0.0, dz = 0.0): return _hexablock_swig.Document_addVector(self, dx, dy, dz)
    def addVectorVertices(self, *args): return _hexablock_swig.Document_addVectorVertices(self, *args)
    def addLaws(self, *args): return _hexablock_swig.Document_addLaws(self, *args)
    def addHexaGroup(self, *args): return _hexablock_swig.Document_addHexaGroup(self, *args)
    def addQuadGroup(self, *args): return _hexablock_swig.Document_addQuadGroup(self, *args)
    def addQuadNodeGroup(self, *args): return _hexablock_swig.Document_addQuadNodeGroup(self, *args)
    def addHexaNodeGroup(self, *args): return _hexablock_swig.Document_addHexaNodeGroup(self, *args)
    def addEdgeGroup(self, *args): return _hexablock_swig.Document_addEdgeGroup(self, *args)
    def addEdgeNodeGroup(self, *args): return _hexablock_swig.Document_addEdgeNodeGroup(self, *args)
    def addVertexNodeGroup(self, *args): return _hexablock_swig.Document_addVertexNodeGroup(self, *args)
    def makeTranslation(self, *args): return _hexablock_swig.Document_makeTranslation(self, *args)
    def makeScale(self, *args): return _hexablock_swig.Document_makeScale(self, *args)
    def makeRotation(self, *args): return _hexablock_swig.Document_makeRotation(self, *args)
    def makeSymmetryPoint(self, *args): return _hexablock_swig.Document_makeSymmetryPoint(self, *args)
    def makeSymmetryLine(self, *args): return _hexablock_swig.Document_makeSymmetryLine(self, *args)
    def makeSymmetryPlane(self, *args): return _hexablock_swig.Document_makeSymmetryPlane(self, *args)
    def performTranslation(self, *args): return _hexablock_swig.Document_performTranslation(self, *args)
    def performScale(self, *args): return _hexablock_swig.Document_performScale(self, *args)
    def performRotation(self, *args): return _hexablock_swig.Document_performRotation(self, *args)
    def performSymmetryPoint(self, *args): return _hexablock_swig.Document_performSymmetryPoint(self, *args)
    def performSymmetryLine(self, *args): return _hexablock_swig.Document_performSymmetryLine(self, *args)
    def performSymmetryPlane(self, *args): return _hexablock_swig.Document_performSymmetryPlane(self, *args)
    def disconnectQuad(self, *args): return _hexablock_swig.Document_disconnectQuad(self, *args)
    def disconnectEdge(self, *args): return _hexablock_swig.Document_disconnectEdge(self, *args)
    def disconnectVertex(self, *args): return _hexablock_swig.Document_disconnectVertex(self, *args)
    def disconnectEdges(self, *args): return _hexablock_swig.Document_disconnectEdges(self, *args)
    def replace(self, *args): return _hexablock_swig.Document_replace(self, *args)
    def mergeVertices(self, *args): return _hexablock_swig.Document_mergeVertices(self, *args)
    def mergeEdges(self, *args): return _hexablock_swig.Document_mergeEdges(self, *args)
    def mergeQuads(self, *args): return _hexablock_swig.Document_mergeQuads(self, *args)
    def clearAssociation(self): return _hexablock_swig.Document_clearAssociation(self)
    def associateOpenedLine(self, *args): return _hexablock_swig.Document_associateOpenedLine(self, *args)
    def associateClosedLine(self, *args): return _hexablock_swig.Document_associateClosedLine(self, *args)
    def countHexa(self): return _hexablock_swig.Document_countHexa(self)
    def countQuad(self): return _hexablock_swig.Document_countQuad(self)
    def countEdge(self): return _hexablock_swig.Document_countEdge(self)
    def countVertex(self): return _hexablock_swig.Document_countVertex(self)
    def countVector(self): return _hexablock_swig.Document_countVector(self)
    def countGroup(self): return _hexablock_swig.Document_countGroup(self)
    def countLaw(self): return _hexablock_swig.Document_countLaw(self)
    def countPropagation(self): return _hexablock_swig.Document_countPropagation(self)
    def countShape(self): return _hexablock_swig.Document_countShape(self)
    def countUsedHexa(self): return _hexablock_swig.Document_countUsedHexa(self)
    def countUsedQuad(self): return _hexablock_swig.Document_countUsedQuad(self)
    def countUsedEdge(self): return _hexablock_swig.Document_countUsedEdge(self)
    def countUsedVertex(self): return _hexablock_swig.Document_countUsedVertex(self)
    def getHexa(self, *args): return _hexablock_swig.Document_getHexa(self, *args)
    def getQuad(self, *args): return _hexablock_swig.Document_getQuad(self, *args)
    def getEdge(self, *args): return _hexablock_swig.Document_getEdge(self, *args)
    def getVertex(self, *args): return _hexablock_swig.Document_getVertex(self, *args)
    def getUsedHexa(self, *args): return _hexablock_swig.Document_getUsedHexa(self, *args)
    def getUsedQuad(self, *args): return _hexablock_swig.Document_getUsedQuad(self, *args)
    def getUsedEdge(self, *args): return _hexablock_swig.Document_getUsedEdge(self, *args)
    def getUsedVertex(self, *args): return _hexablock_swig.Document_getUsedVertex(self, *args)
    def getVector(self, *args): return _hexablock_swig.Document_getVector(self, *args)
    def getShape(self, *args): return _hexablock_swig.Document_getShape(self, *args)
    def getGroup(self, *args): return _hexablock_swig.Document_getGroup(self, *args)
    def getLaw(self, *args): return _hexablock_swig.Document_getLaw(self, *args)
    def getPropagation(self, *args): return _hexablock_swig.Document_getPropagation(self, *args)
    def getFirstExplicitShape(self): return _hexablock_swig.Document_getFirstExplicitShape(self)
    def findEdge(self, *args): return _hexablock_swig.Document_findEdge(self, *args)
    def findQuad(self, *args): return _hexablock_swig.Document_findQuad(self, *args)
    def findHexa(self, *args): return _hexablock_swig.Document_findHexa(self, *args)
    def findGroup(self, *args): return _hexablock_swig.Document_findGroup(self, *args)
    def findLaw(self, *args): return _hexablock_swig.Document_findLaw(self, *args)
    def findPropagation(self, *args): return _hexablock_swig.Document_findPropagation(self, *args)
    def removeHexa(self, *args): return _hexablock_swig.Document_removeHexa(self, *args)
    def removeQuad(self, *args): return _hexablock_swig.Document_removeQuad(self, *args)
    def removeConnectedHexa(self, *args): return _hexablock_swig.Document_removeConnectedHexa(self, *args)
    def removeElements(self, *args): return _hexablock_swig.Document_removeElements(self, *args)
    def removeGroup(self, *args): return _hexablock_swig.Document_removeGroup(self, *args)
    def removeLaw(self, *args): return _hexablock_swig.Document_removeLaw(self, *args)
    def makeCartesianTop(self, *args): return _hexablock_swig.Document_makeCartesianTop(self, *args)
    def makeCartesianUni(self, *args): return _hexablock_swig.Document_makeCartesianUni(self, *args)
    def makeCartesian(self, *args): return _hexablock_swig.Document_makeCartesian(self, *args)
    def makeCylinderTop(self, *args): return _hexablock_swig.Document_makeCylinderTop(self, *args)
    def makeCylinderUni(self, *args): return _hexablock_swig.Document_makeCylinderUni(self, *args)
    def makeCylinder(self, *args): return _hexablock_swig.Document_makeCylinder(self, *args)
    def makePipeTop(self, *args): return _hexablock_swig.Document_makePipeTop(self, *args)
    def makePipeUni(self, *args): return _hexablock_swig.Document_makePipeUni(self, *args)
    def makePipe(self, *args): return _hexablock_swig.Document_makePipe(self, *args)
    def makeSphericalTop(self, *args): return _hexablock_swig.Document_makeSphericalTop(self, *args)
    def makeSphericalUni(self, *args): return _hexablock_swig.Document_makeSphericalUni(self, *args)
    def makeSpherical(self, *args): return _hexablock_swig.Document_makeSpherical(self, *args)
    def makeSphereTop(self, *args): return _hexablock_swig.Document_makeSphereTop(self, *args)
    def makeSphereUni(self, *args): return _hexablock_swig.Document_makeSphereUni(self, *args)
    def makeSphere(self, *args): return _hexablock_swig.Document_makeSphere(self, *args)
    def makeRindTop(self, *args): return _hexablock_swig.Document_makeRindTop(self, *args)
    def makeRindUni(self, *args): return _hexablock_swig.Document_makeRindUni(self, *args)
    def makeRind(self, *args): return _hexablock_swig.Document_makeRind(self, *args)
    def makeCylinders(self, *args): return _hexablock_swig.Document_makeCylinders(self, *args)
    def makePipes(self, *args): return _hexablock_swig.Document_makePipes(self, *args)
    def extrudeQuadTop(self, *args): return _hexablock_swig.Document_extrudeQuadTop(self, *args)
    def extrudeQuadUni(self, *args): return _hexablock_swig.Document_extrudeQuadUni(self, *args)
    def extrudeQuad(self, *args): return _hexablock_swig.Document_extrudeQuad(self, *args)
    def extrudeQuadsTop(self, *args): return _hexablock_swig.Document_extrudeQuadsTop(self, *args)
    def extrudeQuadsUni(self, *args): return _hexablock_swig.Document_extrudeQuadsUni(self, *args)
    def extrudeQuads(self, *args): return _hexablock_swig.Document_extrudeQuads(self, *args)
    def revolutionQuadUni(self, *args): return _hexablock_swig.Document_revolutionQuadUni(self, *args)
    def revolutionQuad(self, *args): return _hexablock_swig.Document_revolutionQuad(self, *args)
    def revolutionQuadsUni(self, *args): return _hexablock_swig.Document_revolutionQuadsUni(self, *args)
    def revolutionQuads(self, *args): return _hexablock_swig.Document_revolutionQuads(self, *args)
    def joinQuadUni(self, *args): return _hexablock_swig.Document_joinQuadUni(self, *args)
    def joinQuadsUni(self, *args): return _hexablock_swig.Document_joinQuadsUni(self, *args)
    def joinQuad(self, *args): return _hexablock_swig.Document_joinQuad(self, *args)
    def joinQuads(self, *args): return _hexablock_swig.Document_joinQuads(self, *args)
    def cutUni(self, *args): return _hexablock_swig.Document_cutUni(self, *args)
    def cut(self, *args): return _hexablock_swig.Document_cut(self, *args)
    def addGroup(self, *args): return _hexablock_swig.Document_addGroup(self, *args)
    def isSaved(self): return _hexablock_swig.Document_isSaved(self)
    def appendXml(self, *args): return _hexablock_swig.Document_appendXml(self, *args)
    def getXml(self): return _hexablock_swig.Document_getXml(self)
    def getLevel(self): return _hexablock_swig.Document_getLevel(self)
    def findVertex(self, *args): return _hexablock_swig.Document_findVertex(self, *args)
    def closeQuads(self, *args): return _hexablock_swig.Document_closeQuads(self, *args)
    def addLaw(self, *args): return _hexablock_swig.Document_addLaw(self, *args)
    def checkAssociations(self): return _hexablock_swig.Document_checkAssociations(self)
    def addShape(self, *args): return _hexablock_swig.Document_addShape(self, *args)
    __swig_destroy__ = _hexablock_swig.delete_Document
    __del__ = lambda self : None;
Document_swigregister = _hexablock_swig.Document_swigregister
Document_swigregister(Document)

class Propagation(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Propagation, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Propagation, name)
    __repr__ = _swig_repr
    def getEdges(self): return _hexablock_swig.Propagation_getEdges(self)
    def getLaw(self): return _hexablock_swig.Propagation_getLaw(self)
    def getWay(self): return _hexablock_swig.Propagation_getWay(self)
    def setWay(self, *args): return _hexablock_swig.Propagation_setWay(self, *args)
    def setLaw(self, *args): return _hexablock_swig.Propagation_setLaw(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Propagation(*args)
        try: self.this.append(this)
        except: self.this = this
    def saveXml(self, *args): return _hexablock_swig.Propagation_saveXml(self, *args)
    def addEdge(self, *args): return _hexablock_swig.Propagation_addEdge(self, *args)
    def majLaw(self): return _hexablock_swig.Propagation_majLaw(self)
    __swig_destroy__ = _hexablock_swig.delete_Propagation
    __del__ = lambda self : None;
Propagation_swigregister = _hexablock_swig.Propagation_swigregister
Propagation_swigregister(Propagation)


def hex_instance():
  return _hexablock_swig.hex_instance()
hex_instance = _hexablock_swig.hex_instance
class Hex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hex, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getInstance"] = lambda x: _hexablock_swig.Hex_getInstance
    if _newclass:getInstance = staticmethod(_hexablock_swig.Hex_getInstance)
    def countDocument(self): return _hexablock_swig.Hex_countDocument(self)
    def getDocument(self, *args): return _hexablock_swig.Hex_getDocument(self, *args)
    def removeDocument(self, *args): return _hexablock_swig.Hex_removeDocument(self, *args)
    def addDocument(self, name = "default"): return _hexablock_swig.Hex_addDocument(self, name)
    def loadDocument(self, *args): return _hexablock_swig.Hex_loadDocument(self, *args)
    def findDocument(self, *args): return _hexablock_swig.Hex_findDocument(self, *args)
    def what(self): return _hexablock_swig.Hex_what(self)
    def sizeofMessage(self): return _hexablock_swig.Hex_sizeofMessage(self)
    def getMessageLine(self, *args): return _hexablock_swig.Hex_getMessageLine(self, *args)
    def __init__(self): 
        this = _hexablock_swig.new_Hex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Hex
    __del__ = lambda self : None;
Hex_swigregister = _hexablock_swig.Hex_swigregister
Hex_swigregister(Hex)

def Hex_getInstance():
  return _hexablock_swig.Hex_getInstance()
Hex_getInstance = _hexablock_swig.Hex_getInstance


def what():
  return _hexablock_swig.what()
what = _hexablock_swig.what
class Elements(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Elements, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Elements, name)
    __repr__ = _swig_repr
    def getHexa(self, *args): return _hexablock_swig.Elements_getHexa(self, *args)
    def getQuad(self, *args): return _hexablock_swig.Elements_getQuad(self, *args)
    def getEdge(self, *args): return _hexablock_swig.Elements_getEdge(self, *args)
    def getVertex(self, *args): return _hexablock_swig.Elements_getVertex(self, *args)
    def getHexaIJK(self, *args): return _hexablock_swig.Elements_getHexaIJK(self, *args)
    def getQuadIJ(self, *args): return _hexablock_swig.Elements_getQuadIJ(self, *args)
    def getQuadJK(self, *args): return _hexablock_swig.Elements_getQuadJK(self, *args)
    def getQuadIK(self, *args): return _hexablock_swig.Elements_getQuadIK(self, *args)
    def getEdgeI(self, *args): return _hexablock_swig.Elements_getEdgeI(self, *args)
    def getEdgeJ(self, *args): return _hexablock_swig.Elements_getEdgeJ(self, *args)
    def getEdgeK(self, *args): return _hexablock_swig.Elements_getEdgeK(self, *args)
    def getVertexIJK(self, *args): return _hexablock_swig.Elements_getVertexIJK(self, *args)
    def countHexa(self): return _hexablock_swig.Elements_countHexa(self)
    def countQuad(self): return _hexablock_swig.Elements_countQuad(self)
    def countEdge(self): return _hexablock_swig.Elements_countEdge(self)
    def countVertex(self): return _hexablock_swig.Elements_countVertex(self)
    def nearestVertex(self, *args): return _hexablock_swig.Elements_nearestVertex(self, *args)
    def findVertex(self, *args): return _hexablock_swig.Elements_findVertex(self, *args)
    def clearAssociation(self): return _hexablock_swig.Elements_clearAssociation(self)
    def saveVtk(self, *args): return _hexablock_swig.Elements_saveVtk(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Elements(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Elements
    __del__ = lambda self : None;
Elements_swigregister = _hexablock_swig.Elements_swigregister
Elements_swigregister(Elements)

class BiCylinder(Elements):
    __swig_setmethods__ = {}
    for _s in [Elements]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [Elements]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiCylinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hexablock_swig.new_BiCylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    def getHexaIJK(self, *args): return _hexablock_swig.BiCylinder_getHexaIJK(self, *args)
    def getQuadIJ(self, *args): return _hexablock_swig.BiCylinder_getQuadIJ(self, *args)
    def getQuadJK(self, *args): return _hexablock_swig.BiCylinder_getQuadJK(self, *args)
    def getQuadIK(self, *args): return _hexablock_swig.BiCylinder_getQuadIK(self, *args)
    def getEdgeI(self, *args): return _hexablock_swig.BiCylinder_getEdgeI(self, *args)
    def getEdgeJ(self, *args): return _hexablock_swig.BiCylinder_getEdgeJ(self, *args)
    def getEdgeK(self, *args): return _hexablock_swig.BiCylinder_getEdgeK(self, *args)
    def getVertexIJK(self, *args): return _hexablock_swig.BiCylinder_getVertexIJK(self, *args)
    __swig_destroy__ = _hexablock_swig.delete_BiCylinder
    __del__ = lambda self : None;
BiCylinder_swigregister = _hexablock_swig.BiCylinder_swigregister
BiCylinder_swigregister(BiCylinder)

class NewShape(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewShape, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewShape, name)
    __repr__ = _swig_repr
    def countVertex(self): return _hexablock_swig.NewShape_countVertex(self)
    def countEdge(self): return _hexablock_swig.NewShape_countEdge(self)
    def countFace(self): return _hexablock_swig.NewShape_countFace(self)
    def getVertex(self, *args): return _hexablock_swig.NewShape_getVertex(self, *args)
    def getEdge(self, *args): return _hexablock_swig.NewShape_getEdge(self, *args)
    def getFace(self, *args): return _hexablock_swig.NewShape_getFace(self, *args)
    def getNameVertex(self, *args): return _hexablock_swig.NewShape_getNameVertex(self, *args)
    def getNameEdge(self, *args): return _hexablock_swig.NewShape_getNameEdge(self, *args)
    def getNameFace(self, *args): return _hexablock_swig.NewShape_getNameFace(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_NewShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_NewShape
    __del__ = lambda self : None;
NewShape_swigregister = _hexablock_swig.NewShape_swigregister
NewShape_swigregister(NewShape)

class Group(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    def addElement(self, *args): return _hexablock_swig.Group_addElement(self, *args)
    def countElement(self): return _hexablock_swig.Group_countElement(self)
    def getKind(self): return _hexablock_swig.Group_getKind(self)
    def clearElement(self): return _hexablock_swig.Group_clearElement(self)
    def removeElement(self, *args): return _hexablock_swig.Group_removeElement(self, *args)
    def getElement(self, *args): return _hexablock_swig.Group_getElement(self, *args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Group
    __del__ = lambda self : None;
Group_swigregister = _hexablock_swig.Group_swigregister
Group_swigregister(Group)



